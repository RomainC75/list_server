// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: list.sql

package db

import (
	"context"
	"time"
)

const createList = `-- name: CreateList :one
INSERT INTO lists (
    name,
    user_id,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, created_at, updated_at, user_id
`

type CreateListParams struct {
	Name      string
	UserID    int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, createList,
		arg.Name,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getListForUpdate = `-- name: GetListForUpdate :one
SELECT id, name, created_at, updated_at, user_id FROM lists
WHERE id = $1 AND user_id = $2 LIMIT 1
FOR NO KEY UPDATE
`

type GetListForUpdateParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) GetListForUpdate(ctx context.Context, arg GetListForUpdateParams) (List, error) {
	row := q.db.QueryRowContext(ctx, getListForUpdate, arg.ID, arg.UserID)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getlist = `-- name: Getlist :one
SELECT id, name, created_at, updated_at, user_id FROM lists WHERE id = $1
`

func (q *Queries) Getlist(ctx context.Context, id int32) (List, error) {
	row := q.db.QueryRowContext(ctx, getlist, id)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getlists = `-- name: Getlists :many
SELECT id, name, created_at, updated_at, user_id FROM lists WHERE user_id = $1 ORDER BY updated_at
`

func (q *Queries) Getlists(ctx context.Context, userID int32) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getlists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []List{}
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :one

UPDATE lists 
SET name = $2, updated_at = $3
WHERE id = $1
RETURNING id, name, created_at, updated_at, user_id
`

type UpdateListParams struct {
	ID        int32
	Name      string
	UpdatedAt time.Time
}

// NO KEY : avoid dead-lock !
func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateList, arg.ID, arg.Name, arg.UpdatedAt)
	var i List
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
